module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  full_adder fulladder;
  
  .clk(clk) {
    	reset_conditioner reset_cond;
    	fsm state(.clk(clk), .rst(rst)) = {MANUAL, AUTO}; // fsm with all the states 
      
  .rst(rst){
  	delayer delayer;
    	multi_seven_seg seg;
    	dff ctr[8]; // our lovely counter                      
    	#BAUD(1000000), #CLK_FREQ(100000000) {
        	uart_rx rx;
        	uart_tx tx;
      		}
      	greeter greeter; // instance of our greeter
    }
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset

    rx.rx = usb_rx;         // connect rx input
    usb_tx = tx.tx;         // connect tx output   
      
    greeter.new_rx = rx.new_data;
    greeter.rx_data = rx.data;
    tx.new_data = greeter.new_tx;
    tx.data = greeter.tx_data;
    greeter.tx_busy = tx.busy;
    tx.block = 0;
     
    led = 8h00;             // turn LEDs off	
    io_led = 3x{{8h00}};	// turn LEDs off
    //seg.values = {4hd,4he,4he, 4hd};//display "YAAY"       // the segments will display "000" by default
    io_seg = ~seg.seg;                    // connect segments to the driver
    io_sel = ~seg.sel;                    // connect digit select to the driver
    
    fulladder.a=0;
    fulladder.b=0;
    fulladder.cin=0;

    case(state.q){
    	state.MANUAL:
		io_led[1]=1;
		//seg.values = {4h02, 4he, 4h03, 4h04};
		fulladder.a=io_dip[0][2];
		fulladder.b=io_dip[0][1];
		fulladder.cin=io_dip[0][0];

		//if statements to on led for A, B, Cin
		if(io_dip[0][0]==1){
		  io_led[0][0]=1; //cin
		}
		if(io_dip[0][1]==1){
		  io_led[0][1]=1; //B
		}
		if(io_dip[0][2]==1){
		  io_led[0][2]=1; //A
		}

		//switching flip to auto 
		  if(io_dip[1][0]){
		  state.d=state.AUTO;
		  }
    		if (io_dip[0][2] == 1) {
      			seg.values[2] = 4h1;//fulladder a
    		}
		else {
	      	seg.values[2] = 4h0;
	    	}

	    	if (io_dip[0][1] == 1) {
	      	seg.values[1]=4h1;//fulladder b
	      	}
		else {
	    	seg.values[1]=4h0;
	    	}
	    	if (io_dip[0][0]==1){//fulladder cin
	      	seg.values[0]=4h1;
	    	} 
	    	else {
	    	seg.values[0]=4h0;
	    	}


	    	if ((io_button[0] == fulladder.s) && (io_button[1] == fulladder.cout)){
			seg.values[3] = 4h05;//pass case
	    	}
	    	else {
			seg.values[3] = 4h02;//fail case
	    	}
        
   
        //Auto
        state.AUTO:

		//switching to manual
		if(!io_dip[1][0]){
		state.d=state.MANUAL;          
		  }

		//led to show it is in au_to
		io_led[1] = 0;
		//setting values of a, b, cin
		fulladder.cin = delayer.value[0];
		fulladder.a = delayer.value[1];
		fulladder.b = delayer.value[2];

		//On led corresponding to whether A,B,Cin is 1
		if(delayer.value[0]==1){
		io_led[0][0]=1;
		} else {
		io_led[0][0]=0;
		}
		if(delayer.value[1]==1){
		io_led[0][1]=1;
		} else {
		io_led[0][1]=0;
		}
		if(delayer.value[2]==1){
		io_led[0][2]=1;
		} else {
		io_led[0][2]=0;
		}

	       io_led[2][0] = fulladder.s;
		io_led[2][1] = fulladder.cout;

	    	if (delayer.value[1] == 1) {
	      	seg.values[1] = 4h1;//fulladder a
	    	}
	    	else {
	      	seg.values[1] = 4h0;
	    	}

	    	if (delayer.value[2] == 1) {
	      	seg.values[2]=4h1;//fulladder b
	      	} else {
	    	seg.values[2]=4h0;
	    	}
	    	if (delayer.value[0]==1){//fulladder cin
	      	seg.values[0]=4h1;
	    	}
		else {
	    	seg.values[0]=4h0;
	    	}


	    	if ((io_button[0] == fulladder.s) && (io_button[1] == fulladder.cout)){
		seg.values[3] = 4h05;//pass case
	    	}
	    	else {
		seg.values[3] = 4h02;//fail case
	    	}
    
}
